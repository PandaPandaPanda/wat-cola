TEST DOCUMENTATION - SODA
=========================
This test documentation highlights and analyzes 6-8 interesting assignment events.

USER INTERFACE TESTING
    This focuses on testing the command line argument processing for the program.

    TEST 1:
    -------
        ./soda ""
        ./soda "soda.config" 0
        ./soda "soda.config" 0 1
        ./soda "soda.config" 1 0
        ./soda 1 "soda.config" 2

        ./soda "soda.config" 1 2
        ./soda "soda.config" d d
        ./soda d d d
        ./soda d d
        ./soda d 1
        ./soda

    TESTING
        the first half are invalid and is not expected to run,
        output message indicating the correct invokation or indicating the config file doesn't exist

        the second half are valid and is expected to run

    ANALYSIS
        the first half of test are invalid as in they either have non-positive vakye in incorrect param order,
        which are incorret and will not run and prints usage prompt
        
        the second half of the test are valid input using either explicit value or d (default), 
        these should start the program running

This concludes user interface testing ------------------------------------------------------------------


ALGORITHM TESTING

    TEST 2:
    -------
    soda.config
        SodaCost               3
        NumStudents            1
        MaxPurchases           1
        NumVendingMachines     5
        MaxStockPerFlavour     1
        MaxShippedPerFlavour   4
        TimeBetweenShipments   20
        GroupoffDelay          20
        ParentalDelay          7
        NumCouriers            4


    DATA DESCRIPTION
        We are using a long shipment time to demonstrate the student's behavior when they cannot find a soda in
        any vending machine, as none of the vneding machines will be stocked
    TESTING
        The following are part of the test output that we will analyze
Parent  Gropoff WATOff  Names   Truck   Plant   Stud0   Mach0   Mach1   Mach2   Mach3   Mach4   Cour0   Cour1   Cour2   Cour3
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
Uninteresting output removed
                        R5      S       S       S1,1                                    S3
D0,1            C0,5    N0,0                    V0                                              t0,5
D0,3            W       N0,1                    V1                                              T0,5
D0,1                    N0,2                    V2
                        N0,3                    V3
                        N0,4            G5      V4
        D3                                      V0
D0,3    F               N0,0    P5      P       V1
                        N0,1    d0,5            V2      r
Uninteresting output removed
    ANALYSIS
        We can see that since none of the machines have been restocked due to the long shipment time, the student 
        must constantly query the name server for new vending machines in hopes of finding one with their favorite
        flavour. This behavior is consistent with the given specifications.



    TEST 3:
    -------
    soda.config
        SodaCost               3
        NumStudents            1
        MaxPurchases           1
        NumVendingMachines     5
        MaxStockPerFlavour     20
        MaxShippedPerFlavour   1
        TimeBetweenShipments   10
        GroupoffDelay          20
        ParentalDelay          7
        NumCouriers            4


    DATA DESCRIPTION
        We are using a low MaxShippedPerFlavour and a high max stock per vending machine to observe the 
        truck restock vending machines fairly, note the truck must go back to the plant after every stock,
        since it wont be able to fill the vending machine stock, which makes the behavior interesting
    TESTING
        The following are part of the test output that we will analyze
Parent  Gropoff WATOff  Names   Truck   Plant   Stud0   Mach0   Mach1   Mach2   Mach3   Mach4   Cour0   Cour1   Cour2   Cour3
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
                        N0,3            G1      V3
                        N0,4    P1      P       V4
                                d0,1
                        N0,0    U0,79           V0      r
D0,1                    N0,1    D0,0            V1      R
        D3                                      V2
D0,1    F               N0,2            G1      V3
                        N0,3            P       V4
                        N0,4    P1
                                d1,1
                        N0,0    U1,79           V0              r
D0,2                    N0,1    D1,0            V1              R
                        N0,2                    V2
D0,1                    N0,3                    V3
                        N0,4            G3      V4
                        N0,0    P3      P       V0
                                d2,3
                        N0,1    U2,77           V1                      r
Uninteresting output removed
    ANALYSIS
        We can see that the truck picked up one bottle from the plant, and tried to refill the first
        vending machine unsuccessfully. The truck ran out of stock, so it immediately went back to the
        plant to pick up more cargo. Upon returning, the truck moves on to the next vending machine, 
        and attempts to restock it, and the cycle continues

    TEST 5:
    -------
    soda.config
        SodaCost               2
        NumStudents            5
        MaxPurchases           5
        NumVendingMachines     1
        MaxStockPerFlavour     1
        MaxShippedPerFlavour   1
        TimeBetweenShipments   1
        GroupoffDelay          2
        ParentalDelay          10
        NumCouriers            5

    DATA DESCRIPTION
        We are creating a situation where there is many student waiting on just a few machine.
        The vending manchine storage is large but shipment size is small, but speed is fast.

    TESTING:
        We are looking at a couple details here. 
        - The student number is much larger than machine number, so we expect the the program to run for some time
        - The shipment is frequent but quantity is small, so the getShipment is called very frequently 
            this is stress testing truck and bottling plant
        - However the plant and then truck should be quickly shutdown once student finish buying
    
    ANALYSIS
        This is stress testing truck and plant. We expect them to be active constantly.
        However, once the student finishes, the bottling plant should finish and truck should stop immediately
        without going for another cycle.
        This is a test case that help locating our previous bug where busy truck prevent plant from shutting down.
